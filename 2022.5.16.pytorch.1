import torch
x=torch.linspace(0,100,100).type(torch.LongTensor)
rand=torch.randn(100)*10
y=x+rand
x_train = x[:-10] #0-90
x_test = x[-10:]
y_train = y[:-10]
y_test = y[-10:]
import matplotlib.pyplot as plt #导入画图的程序包
plt.figure(figsize=(10,8)) #设定绘制窗口大小为10*8 inch
print(x_train)
print(y_train)
plt.plot(x_train.numpy(),y_train.numpy(),'o') #绘制数据，考虑到x和y都是Variable，需要用data获取它们包裹的Tensor，并专成numpy
plt.xlabel('X') #添加X轴的标注
plt.ylabel('Y') #添加Y周的标注
plt.show() #将图形画在下面

a = torch.rand(1,requires_grad = True)
b = torch.rand(1,requires_grad = True)
learning_rate=0.0001
for i in range(1000):
    predictions=a.expand_as(x_train)*x_train+b.expand_as(x_train)
    loss=torch.mean((predictions-y_train)**2)
    print('loss:',loss)
    loss.backward()
    a.data.add_(-learning_rate*a.grad.data)
    b.data.add_(-learning_rate*b.grad.data)
    a.grad.data.zero_()
    b.grad.data.zero_()
x_data=x_train.data.numpy()
plt.figure(figsize=(10,7))
xplot,=plt.plot(x_data,y_train.data.numpy(),'o')
yplot,=plt.plot(x_data,a.data.numpy()*x_data+b.data.numpy())
plt.xlabel('X') #添加X轴的标注
plt.ylabel('Y') #添加Y周的标注
str1=str(a.data.numpy()[0])+'x+'+str(b.data.numpy()[0])
plt.legend([xplot,yplot],['Data',str1])
plt.show()
